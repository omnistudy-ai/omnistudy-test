import "./NoteTaker.css";

// Code editor support imports
import CodeMirror from "@uiw/react-codemirror";
import { vscodeDark } from "@uiw/codemirror-theme-vscode";

// Save as PDF support imports
import { jsPDF } from "jspdf";
import "jspdf/dist/polyfills.es.js";

// Markdown render support imports
import Markdown from "react-markdown";
import remarkMath from 'remark-math'
import rehypeKatex from 'rehype-katex'
import remarkGfm from 'remark-gfm';
import 'katex/dist/katex.min.css'
// Code highlighting support imports
import hljs from "highlight.js/lib/core";
import 'highlight.js/styles/github.css';
import javascript from 'highlight.js/lib/languages/javascript';
import cpp from "highlight.js/lib/languages/cpp";

// Icon imports
import FullscreenIcon from '@mui/icons-material/Fullscreen';
import FullscreenExitIcon from '@mui/icons-material/FullscreenExit';
import EastIcon from '@mui/icons-material/East';
import SouthIcon from '@mui/icons-material/South';
import ArticleIcon from '@mui/icons-material/Article';
import NumbersIcon from '@mui/icons-material/Numbers';
import MicIcon from '@mui/icons-material/Mic';

import React, { useEffect, useState } from "react";

export default function NoteTaker() {

    const [notesTitle, setNotesTitle] = useState<string>("Untitled Notes");
    const [notes, setNotes] = useState<string>("# Type here to get started!\n\n## Small Header\n\n### Smaller Header\n* Bullet Points\n- Bullet Points\n\n[Links](https://omnistudy.ai)\n\nMath: $\\sum_{i=1}^{10} x_i^k$");
    const [vertical, setVertical] = useState<boolean>(false);
    const [typeFs, setTypeFs] = useState<boolean>(false);
    const [renderFs, setRenderFs] = useState<boolean>(false);
    const doc = new jsPDF();

    const [inputMethod, setInputMethod] = useState<string>("doc");

    /**
     * Update notes state: updates editor and render
     */
    function update(elem: string) {
        setNotes(elem);
        hljs.highlightAll();
    }

    /**
     * Toggle editing orientation: horizontal (left 2 right) or vertical (top 2 bottom)
     */
    function toggleOrientation() {
        setVertical(!vertical);
        const content = document.querySelector(".note-taker .content") as HTMLElement;
        if(vertical) {
            content.classList.add("horizontal");
            content.classList.remove("vertical");
        }
        else {
            content.classList.add("vertical");
            content.classList.remove("horizontal");
        }
    }

    /**
     * Open fullscreen mode on the given content side: type or render
     * 
     * @param e the event generated by the click
     */
    function enterFullscreen(e: React.MouseEvent<HTMLSpanElement, MouseEvent>) {
        const targetCname = e.currentTarget.parentElement!.className;
        const contentElem = document.querySelector(".note-taker .content") as HTMLElement;
        if(targetCname === "type") {
            setTypeFs(!typeFs);
            // exit fullscreen for type
            if(typeFs) {
                (document.querySelector(".note-taker .render") as HTMLElement)!.style.display = "block";
                contentElem.classList.remove("fullscreen");
            }
            // enter fullscreen for type
            else {
                (document.querySelector(".note-taker .render") as HTMLElement)!.style.display = "none";
                contentElem.classList.add("fullscreen");
            }
        }
        else if(targetCname === "render") {
            setRenderFs(!renderFs);
            // exit fullscreen for render
            if(renderFs) {
                (document.querySelector(".note-taker .type") as HTMLElement)!.style.display = "block";
                contentElem.classList.remove("fullscreen");
            }
            // enter fullscreen for render
            else {
                (document.querySelector(".note-taker .type") as HTMLElement)!.style.display = "none";
                contentElem.classList.add("fullscreen");
            }
        }
    }

    function savePdfFromRender() {
        const pdfContent = (document.querySelector(".note-taker .render") as HTMLElement).innerHTML;
        doc.html(pdfContent, {
            callback: function(doc) {
                doc.save(`${notesTitle.replaceAll(" ", "_")}.pdf`);
            },
            x: 15,
            y: 15,
            width: 170,
            windowWidth: 650
        });
    }

    useEffect(() => {
        hljs.registerLanguage('javascript', javascript);
        hljs.registerLanguage('cpp', cpp);
    }, []);

    return (
        <div className="note-taker">
            <div className="heading">
                <h1 
                    contentEditable={true} 
                    suppressContentEditableWarning={true}
                    onChange={(e) => setNotesTitle((e.target as HTMLElement).innerText)}
                >
                    {notesTitle}
                </h1>
                <button onClick={savePdfFromRender}>Save As PDF</button>
                <button onClick={toggleOrientation}>
                    {vertical ? <SouthIcon/> : <EastIcon/>}
                </button>
            </div>
            <div className="content horizontal">
                <div className="type">
                    <div className="flex flex-row bg-stone-600 p-4 gap-x-2">
                        <ArticleIcon className="text-white cursor-pointer hover:text-stone-400 transition" />
                        <NumbersIcon className="text-white cursor-pointer hover:text-stone-400 transition" />
                        <MicIcon className="text-white cursor-pointer hover:text-stone-400 transition" />
                    </div>
                    <div className="h-full relative"> 
                        <span className="fullscreen" onClick={(e) => enterFullscreen(e)}>
                            {typeFs ? <FullscreenExitIcon/> : <FullscreenIcon/>}
                        </span>
                        {inputMethod == "" && <div className="flex justify-center items-center h-full text-2xl text-gray-400">
                            Select an input method
                        </div>}
                        {inputMethod == "markdown" && <CodeMirror
                            value={notes}
                            theme={vscodeDark}
                            onChange={(value) => update(value)}
                        />}
                    </div>
                </div>
                <div className="render">
                    <span className="fullscreen" onClick={(e) => enterFullscreen(e)}>
                        {renderFs ? <FullscreenExitIcon/> : <FullscreenIcon/>}
                    </span>
                    <Markdown
                        children={notes}
                        remarkPlugins={[ remarkMath, remarkGfm ]}
                        rehypePlugins={[ rehypeKatex ]}
                        skipHtml={false}
                    />
                </div>
            </div>
        </div>
    )
}